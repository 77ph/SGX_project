from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.asymmetric import padding
from eth_keys import keys
from eth_utils import to_checksum_address
import sys
import os

# üì• –ê—Ä–≥—É–º–µ–Ω—Ç—ã
if len(sys.argv) != 2:
    print("Usage: python3 decrypt_recovery_blob.py <ethereum_address>")
    sys.exit(1)

address = sys.argv[1].lower()
if not address.startswith("0x") or len(address) != 42:
    print("Invalid Ethereum address format.")
    sys.exit(1)

# üìÅ –ü—É—Ç–∏
recovery_path = os.path.join("accounts", f"{address}.account.recovery")
privkey_path = "rsa_private_key.pem"

# üîê –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ RSA
with open(privkey_path, "rb") as f:
    private_key = serialization.load_pem_private_key(f.read(), password=None)

# üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ recovery blob
with open(recovery_path, "rb") as f:
    encrypted_blob = f.read()

# –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–ª—é—á–∞
key_size = private_key.key_size // 8
print(f"RSA key size: {key_size} bytes")
print(f"Encrypted blob size: {len(encrypted_blob)} bytes")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—Ç —Ä–∞–∑–º–µ—Ä –∫–ª—é—á–∞
if len(encrypted_blob) > key_size:
    print(f"Error: Encrypted data size ({len(encrypted_blob)}) exceeds key size ({key_size})")
    sys.exit(1)

# üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å PKCS#1 v1.5 padding
try:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º PKCS#1 v1.5 padding –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    decrypted = private_key.decrypt(
        encrypted_blob,
        padding.PKCS1v15()
    )
    print(f"Decrypted data size: {len(decrypted)} bytes")
    print(f"Decrypted data (hex): {decrypted.hex()}")
except Exception as e:
    print(f"Decryption failed: {str(e)}")
    sys.exit(1)

# üì§ –†–∞–∑–±–æ—Ä: privkey (32), pubkey (65)
if len(decrypted) < 97:  # 32 + 65
    print(f"Error: Decrypted data too short ({len(decrypted)} bytes)")
    sys.exit(1)

# –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 97 –±–∞–π—Ç (32 + 65)
private_key_bytes = decrypted[:32]
public_key_bytes = decrypted[32:97]

eth_priv = keys.PrivateKey(private_key_bytes)
eth_pub = eth_priv.public_key
eth_address = eth_pub.to_checksum_address()

print("\nRecovery successful")
print("Private key:  ", private_key_bytes.hex())
print("Public key:   ", public_key_bytes.hex())
print("Ethereum addr:", eth_address)

# üß™ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞
if eth_address.lower() != address:
    print("Warning: recovered address does NOT match input!")
else:
    print("Address matches")
