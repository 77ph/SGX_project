from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.asymmetric import padding
from eth_keys import keys
import sys
import os

# üì• –ê—Ä–≥—É–º–µ–Ω—Ç—ã
if len(sys.argv) != 3:
    print("Usage: python3 decrypt_recovery_blob.py <ethereum_address> <rsa_private_key.pem>")
    sys.exit(1)

address = sys.argv[1].lower()
if not address.startswith("0x") or len(address) != 42:
    print("Invalid Ethereum address format.")
    sys.exit(1)

# üìÅ –ü—É—Ç–∏
recovery_path = os.path.join("accounts", f"{address}.account.recovery")
privkey_path = sys.argv[2]

# üîê –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ RSA
with open(privkey_path, "rb") as f:
    private_key = serialization.load_pem_private_key(f.read(), password=None)

# üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ recovery blob
with open(recovery_path, "rb") as f:
    encrypted_blob = f.read()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
key_size = private_key.key_size // 8
modulus_size = len(encrypted_blob)  # BearSSL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä –º–æ–¥—É–ª—è
print(f"RSA key size: {key_size} bytes")
print(f"Modulus size: {modulus_size} bytes")
print(f"Encrypted blob size: {len(encrypted_blob)} bytes")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–º–µ—Ä –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∫–ª—é—á–∞
if len(encrypted_blob) > key_size:
    print("Error: Ciphertext length exceeds key size.")
    sys.exit(1)

# üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å OAEP (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å BearSSL)
try:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä –º–æ–¥—É–ª—è –±–µ–∑ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    decrypted = private_key.decrypt(
        encrypted_blob,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –µ—Å—Ç—å, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º SHA-256 –∫–∞–∫ –≤ BearSSL
            algorithm=hashes.SHA256(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º SHA-256 –∫–∞–∫ –≤ BearSSL
            label=None  # BearSSL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—É—Å—Ç—É—é –º–µ—Ç–∫—É
        )
    )
    print(f"Decrypted data size: {len(decrypted)} bytes")
    print(f"Decrypted data (hex): {decrypted.hex()}")
except Exception as e:
    print(f"Decryption failed: {str(e)}")
    sys.exit(1)

# üì§ –†–∞–∑–±–æ—Ä –∫–ª—é—á–µ–π
if len(decrypted) < 97:
    print(f"Error: Decrypted data too short ({len(decrypted)} bytes)")
    sys.exit(1)

private_key_bytes = decrypted[:32]
public_key_bytes = decrypted[32:97]

eth_priv = keys.PrivateKey(private_key_bytes)
eth_address = eth_priv.public_key.to_checksum_address()

print("\nRecovery successful")
print("Private key:  ", private_key_bytes.hex())
print("Public key:   ", public_key_bytes.hex())
print("Ethereum addr:", eth_address)

if eth_address.lower() != address:
    print("Warning: recovered address does NOT match input!")
else:
    print("Address matches")
